@using Microsoft.AspNetCore.Components.Web
@using AKS.Common.Models

<Modal @ref="ModalWindow">
    <ModalBackdrop />
    <ModalContent IsCentered="true" Size="Blazorise.ModalSize.Large">
        <ModalHeader>
            <ModalTitle>@Title</ModalTitle>
            <CloseButton Clicked="@CloseModal" />
        </ModalHeader>
        <ModalBody>
            <TopicSearch ProjectId="@ProjectId"
                         CategoryId="@CategoryId"
                         ShowSearch="@ShowSearch"
                         ShowTopicSelected="@ShowTopicSelected"
                         SearchString="@SearchString"
                         AddTopicsAction="@AddTopic"
                         DeleteTopicFunc="@DeleteTopic"
                         ShowAdd="@(AddTopicsAction!=null)"
                         ShowDelete="@(DeleteTopicFunc!=null)" />
        </ModalBody>
    </ModalContent>
</Modal>

@code
{
    private Modal ModalWindow { get; set; } = null!;
    [Parameter] public string Title { get; set; } = "Add Topic";
    [Parameter] public Guid? ProjectId { get; set; }
    [Parameter] public Guid? CategoryId { get; set; }
    [Parameter] public bool ShowSearch { get; set; }
    [Parameter] public bool ShowTopicSelected { get; set; }
    [Parameter] public string SearchString { get; set; } = "";
    [Parameter] public Action<List<TopicList>>? AddTopicsAction { get; set; }
    [Parameter] public Func<List<TopicList>, Task>? DeleteTopicFunc { get; set; }

    public void ShowModal()
    {
        ModalWindow.Show();
    }

    public void CloseModal()
    {
        ModalWindow.Hide();
    }

    private void AddTopic(List<TopicList> topics)
    {
        CloseModal();
        AddTopicsAction?.Invoke(topics);
    }

    private Task DeleteTopic(List<TopicList> topics)
    {
        if (DeleteTopicFunc == null)
        {
            return Task.CompletedTask;
        }
        return DeleteTopicFunc.Invoke(topics);
    }
}
