@implements IDisposable
@using CKEditor.Blazor
@using Microsoft.JSInterop;
@inject IJSRuntime jsRuntime;

<div>
    <textarea id="@CKEditorId">@EditorContent</textarea>
</div>
@functions {

    [Parameter]
    private string EditorContent { get; set; }

    [Parameter]
    private Action<string> EditorContentChanged { get; set; }

    private string CKEditorId { get; set; } = $"ck{Guid.NewGuid().ToString().Replace("-", "")}";

    [Parameter]
    private Action<string> OnEditorChanged { get; set; }

    protected override void OnAfterRender()
    {
        CKEditorJsInterop.InitializeEditor(jsRuntime, CKEditorId, EditorContent);
    }

    private void ThisEditorUpdate(object sender, string editorText)
    {
        EditorContent = editorText;
        OnEditorChanged?.Invoke(editorText);
    }

    public async Task<string> GetEditorText()
    {
        return await CKEditorJsInterop.GetData(jsRuntime, CKEditorId);
    }
    public async void Dispose()
    {
        await CKEditorJsInterop.DestroyCKEditor(jsRuntime, CKEditorId);
    }
}